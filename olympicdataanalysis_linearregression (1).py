# -*- coding: utf-8 -*-
"""OlympicDataAnalysis_LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ASHfMMP-eCS7RUCV7hDg01iCgy7l5GBe
"""

import csv
import pandas as pd

# Cargar el archivo CSV de las Olimpiadas
data = pd.read_csv('/content/athlete_events.csv')
data.head()

print(data["Medal"].unique()) #para realizar el mapeo y cambiarlos a numéricos
print(data["Sex"].unique())

# Mapeo de medallas a valores numéricos

def map_medal(medal):
    if medal == "Gold" or medal == "Silver" or medal == "Bronze":
        return 1
    else:
        return 0

# Mapeo de sexo a valores numéricos
def map_sex(sex):
    if sex in ["M"]:
        return 1
    else:
        return 0

#Se agregan ahora los vlores numéricos a las columnas de medalla y sexo.
data["Medal"] = data["Medal"].apply(map_medal)
data["Sex"] = data["Sex"].apply(map_sex)
# Se remplazan valores NaN por medias
data["Age"].fillna(data["Age"].mean(), inplace=True)
data["Height"].fillna(data["Height"].mean(), inplace=True)
data["Weight"].fillna(data["Weight"].mean(), inplace=True)

data.head()

# Hiperparámetros
learning_rate = 0.001
epochs = 10

# Inicialización de coeficientes
intercept = 0.0
slope_age = 0.0
slope_height = 0.0
slope_weight = 0.0
slope_sex= 0.0

import numpy as np
# Entrenamiento del modelo utilizando gradiente descendente
for _ in range(epochs):
    total_error = 0
    for index, example in data.iterrows():
        age = example["Age"]
        height = example["Height"]
        weight = example["Weight"]
        sex = example["Sex"]
        actual_medal = example["Medal"]

        # Predicción
        z = intercept + slope_age * age + slope_height * height + slope_weight * weight + slope_sex * sex
        prediction = 1 / (1 + np.exp(-z))

        # Cálculo del error
        error = prediction - actual_medal
        total_error += error ** 2

        # Actualización de coeficientes usando gradiente descendente
        intercept -= learning_rate * error
        slope_age -= learning_rate * error * age
        slope_height -= learning_rate * error * height
        slope_weight -= learning_rate * error * weight
        slope_sex -= learning_rate * error * sex

    mse = total_error / len(data)
    print(f"Epoch {_+1}, Mean Squared Error: {mse:.4f}")

# Coeficientes finales
print("Coeficientes finales:")
print("Intercept =", intercept)
print("Slope (Age) =", slope_age)
print("Slope (Height) =", slope_height)
print("Slope (Weight) =", slope_weight)
print("Slope (Sex) =", slope_sex)

#Creación de dataset para testeo
new_data= data.drop(columns=['Medal'])

new_data.head()

# Preprocessing (en columnas edad, peso y altura en el nuevo dataset)
new_data['Age'] = new_data['Age'].astype(int)
new_data['Height'] = new_data['Height'].astype(int)
new_data['Weight'] = new_data['Weight'].astype(int)
new_data['Sex'] = new_data['Sex'].astype(int)

# Calculo de predicción utilizando los coeficientes finales
def predict_medal(age, height, weight, sex):
    z = intercept + slope_sex* sex + slope_age * age + slope_height * height + slope_weight * weight
    prediction = 1 / (1 + np.exp(-z))  # Sigmoid function using np.exp
    return prediction

# Se generan predicciones para cada renglón en la data
predictions = []
for index, row in new_data.iterrows():
    predicted_probability = predict_medal(row['Age'], row['Height'], row['Weight'], row['Sex'])
    predictions.append(predicted_probability)

threshold = 0.5

# Comparar las predicciones con el umbral y mostrar los resultados
for i, prediction in enumerate(predictions):
    if prediction >= threshold:
        result = "Win Medal"
    else:
        result = "No Medal"

# Comparar las predicciones con el umbral y asignar los resultados a una nueva columna
new_data['Medal Prediction'] = ["Win Medal" if prediction >= threshold else "No Medal" for prediction in predictions]

# Print the new data with medal predictions
print(new_data)

# Conteo de predicciones de medalla y no medalla.
prediction_counts = new_data['Medal Prediction'].value_counts()

# Se imprimen los conteos
print("Number of 'No Medal' predictions:", prediction_counts.get('No Medal', 0))
print("Number of 'Win Medal' predictions:", prediction_counts.get('Win Medal', 0))